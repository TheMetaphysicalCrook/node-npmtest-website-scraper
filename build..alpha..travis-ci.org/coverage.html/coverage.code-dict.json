{"/home/travis/build/npmtest/node-npmtest-website-scraper/test.js":"/* istanbul instrument in package npmtest_website_scraper */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-website-scraper/lib.npmtest_website_scraper.js":"/* istanbul instrument in package npmtest_website_scraper */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_website_scraper = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_website_scraper = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-website-scraper/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-website-scraper && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_website_scraper */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_website_scraper\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_website_scraper.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_website_scraper.rollup.js'] =\n            local.assetsDict['/assets.npmtest_website_scraper.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_website_scraper.__dirname + '/lib.npmtest_website_scraper.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-website-scraper/node_modules/website-scraper/index.js":"'use strict';\n\nconst Promise = require('bluebird');\nconst Scraper = require('./lib/scraper.js');\n\nmodule.exports = (options, callback) => {\n\treturn Promise.try(() => {\n\t\treturn new Scraper(options).scrape(callback);\n\t});\n};\n\nmodule.exports.defaults = Scraper.defaults;\n","/home/travis/build/npmtest/node-npmtest-website-scraper/node_modules/website-scraper/lib/scraper.js":"'use strict';\n\nconst Promise = require('bluebird');\nconst _ = require('lodash');\n\nconst logger = require('./logger');\n\nconst defaults = require('./config/defaults');\nconst recursiveSources = require('./config/recursive-sources');\nconst Resource = require('./resource');\n\nconst FilenameGenerator = require('./filename-generator');\nconst Request = require('./request');\nconst ResourceHandler = require('./resource-handler');\nconst ResourceSaver = require('./resource-saver');\nconst u = require('./utils');\nconst NormalizedUrlMap = require('./utils/normalized-url-map');\n\nfunction Scraper (options) {\n\tconst self = this;\n\n\tself.options = u.extend(defaults, options);\n\tself.options.request = u.extend(defaults.request, options.request);\n\tself.options.urls = Array.isArray(self.options.urls) ? self.options.urls : [self.options.urls];\n\n\tif (self.options.subdirectories) {\n\t\tself.options.subdirectories.forEach((element) => {\n\t\t\telement.extensions = element.extensions.map((ext) => ext.toLowerCase());\n\t\t});\n\t}\n\n\tif (self.options.recursive) {\n\t\tself.options.sources = _.union(self.options.sources, recursiveSources);\n\t}\n\n\tlogger.info('init with options', self.options);\n\n\tself.request = new Request(self.options);\n\tself.resourceHandler = new ResourceHandler(self.options, self);\n\tself.filenameGenerator = new FilenameGenerator(self.options);\n\tself.resourceSaver = self.options.resourceSaver ? new self.options.resourceSaver(u.clone(self.options)) : new ResourceSaver(self.options);\n\n\t// Array of Resources for downloading\n\tself.resources = self.options.urls.map((obj) => {\n\t\tconst url = (obj && obj.url) ? obj.url : obj;\n\t\tconst filename = (obj && obj.filename) ? obj.filename : self.options.defaultFilename;\n\t\treturn new Resource(url, filename);\n\t});\n\n\tself.requestedResourcePromises = new NormalizedUrlMap(); // Map url -> request promise\n\tself.loadedResources = new NormalizedUrlMap(); // Map url -> resource\n}\n\nScraper.prototype.loadResource = function loadResource (resource) {\n\tconst url = resource.getUrl();\n\n\tif (this.loadedResources.has(url)) {\n\t\tlogger.debug('found loaded resource for ' + resource);\n\t} else {\n\t\tlogger.debug('add loaded resource ' + resource);\n\t\tthis.loadedResources.set(url, resource);\n\t}\n};\n\nScraper.prototype.saveResource = function saveResource (resource) {\n\tconst self = this;\n\tresource.setSaved();\n\n\treturn Promise.resolve()\n\t\t.then(function handleResource () {\n\t\t\treturn self.resourceHandler.handleResource(resource);\n\t\t}).then(function fileHandled () {\n\t\t\tlogger.info('saving resource ' + resource + ' to fs');\n\t\t\treturn self.resourceSaver.saveResource(resource);\n\t\t}).then(function afterResourceSaved () {\n\t\t\tif (self.options.onResourceSaved) {\n\t\t\t\tself.options.onResourceSaved(resource);\n\t\t\t}\n\t\t}).catch(function handleError (err) {\n\t\t\tlogger.warn('failed to save resource ' + resource);\n\t\t\treturn self.handleError(err, resource);\n\t\t});\n};\n\nScraper.prototype.createNewRequest = function createNewRequest (resource) {\n\tconst self = this;\n\tconst url = resource.getUrl();\n\n\tconst requestPromise = Promise.resolve()\n\t\t.then(function makeRequest () {\n\t\t\tconst referer = resource.parent ? resource.parent.getUrl() : null;\n\t\t\treturn self.request.get(url, referer);\n\t\t}).then(function requestCompleted (responseData) {\n\n\t\t\tif (!u.urlsEqual(responseData.url, url)) { // Url may be changed in redirects\n\t\t\t\tlogger.debug('url changed. old url = ' + url + ', new url = ' + responseData.url);\n\n\t\t\t\tif (self.requestedResourcePromises.has(responseData.url)) {\n\t\t\t\t\treturn self.requestedResourcePromises.get(responseData.url);\n\t\t\t\t}\n\n\t\t\t\tresource.setUrl(responseData.url);\n\t\t\t\tself.requestedResourcePromises.set(responseData.url, requestPromise);\n\t\t\t}\n\n\t\t\tresource.setType(u.getTypeByMime(responseData.mimeType));\n\n\t\t\tconst filename = self.filenameGenerator.generateFilename(resource);\n\t\t\tresource.setFilename(filename);\n\n\t\t\t// if type was not determined by mime we can try to get it from filename after it was generated\n\t\t\tif (!resource.getType()) {\n\t\t\t\tresource.setType(u.getTypeByFilename(filename));\n\t\t\t}\n\n\t\t\tif (responseData.metadata) {\n\t\t\t\tresource.setMetadata(responseData.metadata);\n\t\t\t}\n\n\t\t\tresource.setText(responseData.body);\n\t\t\tself.loadResource(resource); // Add resource to list for future downloading, see Scraper.waitForLoad\n\t\t\treturn resource;\n\t\t}).catch(function handleError (err) {\n\t\t\tlogger.warn('failed to request resource ' + resource);\n\t\t\treturn self.handleError(err, resource);\n\t\t});\n\n\tself.requestedResourcePromises.set(url, requestPromise);\n\treturn requestPromise;\n};\n\nScraper.prototype.requestResource = function requestResource (resource) {\n\tconst url = resource.getUrl();\n\n\tif (this.options.urlFilter && !this.options.urlFilter(url)) {\n\t\tlogger.debug('filtering out ' + resource + ' by url filter');\n\t\treturn Promise.resolve(null);\n\t}\n\n\tif (this.options.maxDepth && resource.getDepth() > this.options.maxDepth) {\n\t\tlogger.debug('filtering out ' + resource + ' by depth');\n\t\treturn Promise.resolve(null);\n\t}\n\n\tif (this.requestedResourcePromises.has(url)) {\n\t\tlogger.debug('found requested resource for ' + resource);\n\t\treturn this.requestedResourcePromises.get(url);\n\t}\n\n\treturn this.createNewRequest(resource);\n};\n\nScraper.prototype.load = function load () {\n\treturn Promise\n\t\t.map(this.resources, this.requestResource.bind(this))\n\t\t.then(this.waitForLoad.bind(this));\n};\n\n// Returns a promise which gets resolved when all resources are loaded.\n// 1. Get all not saved resources and save them\n// 2. Recursion if any new not saved resource were added during this time. If not, loading is done.\nScraper.prototype.waitForLoad = function waitForLoad () {\n\tconst resourcesToSave = Array.from(this.loadedResources.values()).filter((r) => !r.isSaved());\n\tconst loadingIsFinished = _.isEmpty(resourcesToSave);\n\n\tif (!loadingIsFinished) {\n\t\treturn Promise\n\t\t\t.mapSeries(resourcesToSave, this.saveResource.bind(this))\n\t\t\t.then(this.waitForLoad.bind(this));\n\t}\n\tlogger.info('downloading is finished successfully');\n\treturn Promise.resolve(this.resources);\n};\n\nScraper.prototype.handleError = function handleError (err, resource) {\n\tif (resource && this.options.onResourceError) {\n\t\tthis.options.onResourceError(resource, err);\n\t}\n\tif (this.options.ignoreErrors) {\n\t\tlogger.warn('ignoring error: ' + err.message);\n\t\treturn Promise.resolve(null);\n\t}\n\treturn Promise.reject(err);\n};\n\nScraper.prototype.errorCleanup = function errorCleanup (error) {\n\tlogger.error('finishing with error: ' + error.message);\n\treturn this.resourceSaver.errorCleanup(error).then(() => {\n\t\treturn Promise.reject(error);\n\t});\n};\n\nScraper.prototype.scrape = function scrape (callback) {\n\treturn Promise.bind(this)\n\t\t.then(this.load)\n\t\t.catch(this.errorCleanup)\n\t\t.asCallback(callback);\n};\n\nScraper.defaults = u.clone(defaults);\n\nmodule.exports = Scraper;\n","/home/travis/build/npmtest/node-npmtest-website-scraper/node_modules/website-scraper/lib/logger.js":"var debug = require('debug');\nvar appName = 'website-scraper';\n\nfunction getLoggerName (appName, logLevel) {\n\treturn appName + ':' + logLevel;\n}\n\nvar logLevels = ['error', 'warn', 'info', 'debug', 'log'];\n\nvar logger = {};\nlogLevels.forEach(function createLogForLevel (logLevel) {\n\tlogger[logLevel] = debug(getLoggerName(appName, logLevel));\n});\n\nmodule.exports = logger;\n","/home/travis/build/npmtest/node-npmtest-website-scraper/node_modules/website-scraper/lib/config/defaults.js":"'use strict';\nconst config = {\n\tfilenameGenerator: 'byType',\n\tdefaultFilename: 'index.html',\n\tprettifyUrls: false,\n\tsources: [\n\t\t{ selector: 'style' },\n\t\t{ selector: '[style]', attr: 'style' },\n\t\t{ selector: 'img', attr: 'src' },\n\t\t{ selector: 'img', attr: 'srcset' },\n\t\t{ selector: 'input', attr: 'src' },\n\t\t{ selector: 'object', attr: 'data' },\n\t\t{ selector: 'embed', attr: 'src' },\n\t\t{ selector: 'param[name=\"movie\"]', attr: 'value' },\n\t\t{ selector: 'script', attr: 'src' },\n\t\t{ selector: 'link[rel=\"stylesheet\"]', attr: 'href' },\n\t\t{ selector: 'link[rel*=\"icon\"]', attr: 'href' },\n\t\t{ selector: 'svg *[xlink\\\\:href]', attr: 'xlink:href' },\n\t\t{ selector: 'svg *[href]', attr: 'href' },\n\t\t{ selector: 'picture source', attr: 'srcset' },\n\t\t{ selector: 'meta[property=\"og\\\\:image\"]', attr: 'content' },\n\t\t{ selector: 'meta[property=\"og\\\\:image\\\\:url\"]', attr: 'content' },\n\t\t{ selector: 'meta[property=\"og\\\\:image\\\\:secure_url\"]', attr: 'content' },\n\t\t{ selector: 'meta[property=\"og\\\\:audio\"]', attr: 'content' },\n\t\t{ selector: 'meta[property=\"og\\\\:audio\\\\:url\"]', attr: 'content' },\n\t\t{ selector: 'meta[property=\"og\\\\:audio\\\\:secure_url\"]', attr: 'content' },\n\t\t{ selector: 'meta[property=\"og\\\\:video\"]', attr: 'content' },\n\t\t{ selector: 'meta[property=\"og\\\\:video\\\\:url\"]', attr: 'content' },\n\t\t{ selector: 'meta[property=\"og\\\\:video\\\\:secure_url\"]', attr: 'content' },\n\t\t{ selector: 'video', attr: 'src' },\n\t\t{ selector: 'video source', attr: 'src' },\n\t\t{ selector: 'video track', attr: 'src' },\n\t\t{ selector: 'audio', attr: 'src' },\n\t\t{ selector: 'audio source', attr: 'src' },\n\t\t{ selector: 'audio track', attr: 'src' }\n\t],\n\tsubdirectories: [\n\t\t{ directory: 'images', extensions: ['.png', '.jpg', '.jpeg', '.gif', '.webp'] },\n\t\t{ directory: 'js', extensions: ['.js'] },\n\t\t{ directory: 'css', extensions: ['.css'] },\n\t\t{ directory: 'fonts', extensions: ['.ttf', '.woff', '.woff2', '.eot', '.svg'] }\n\t],\n\trequest: {\n\t\tencoding: 'binary',\n\t\tstrictSSL: false,\n\t\tjar: true,\n\t\tgzip: true\n\t},\n\turlFilter: null,\n\trecursive: false,\n\tmaxDepth: null,\n\tignoreErrors: true,\n\thttpResponseHandler: null,\n\tonResourceSaved: null,\n\tonResourceError: null,\n\tresourceSaver: null\n};\n\nmodule.exports = config;\n","/home/travis/build/npmtest/node-npmtest-website-scraper/node_modules/website-scraper/lib/config/recursive-sources.js":"module.exports = [\n\t{ selector: 'a', attr: 'href' }\n];\n","/home/travis/build/npmtest/node-npmtest-website-scraper/node_modules/website-scraper/lib/resource.js":"var types = require('./config/resource-types');\n\nfunction Resource (url, filename) {\n\tthis.url = url;\n\tthis.filename = filename;\n\n\tthis.type = null;\n\tthis.depth = 0;\n\n\tthis.parent = null;\n\tthis.children = [];\n\n\tthis.saved = false;\n}\n\nResource.prototype.createChild = function createChild (url, filename) {\n\tvar child = new Resource(url, filename);\n\tvar currentDepth = this.getDepth();\n\n\tchild.parent = this;\n\tchild.depth = ++currentDepth;\n\n\tthis.children.push(child);\n\n\treturn child;\n};\n\nResource.prototype.updateChild = function updateChild (oldChild, newChild) {\n\tvar index = this.children.indexOf(oldChild);\n\tif (index >= 0) {\n\t\tthis.children[index] = newChild;\n\t}\n};\n\nResource.prototype.getUrl = function getUrl () {\n\treturn this.url;\n};\n\nResource.prototype.setUrl = function setUrl (url) {\n\tthis.url = url;\n};\n\nResource.prototype.getFilename = function getFilename () {\n\treturn this.filename;\n};\n\nResource.prototype.setFilename = function setFilename (filename) {\n\tthis.filename = filename;\n};\n\nResource.prototype.getText = function getText () {\n\treturn this.text;\n};\n\nResource.prototype.setText = function setText (text) {\n\tthis.text = text;\n};\n\nResource.prototype.getDepth = function getDepth () {\n\treturn this.depth;\n};\n\nResource.prototype.setType = function setType (type) {\n\tthis.type = type;\n};\n\nResource.prototype.getType = function getType () {\n\treturn this.type;\n};\n\nResource.prototype.isHtml = function isHtml () {\n\treturn this.getType() === types.html;\n};\n\nResource.prototype.isCss = function isCss () {\n\treturn this.getType() === types.css;\n};\n\nResource.prototype.toString = function toString () {\n\treturn '{ url: \"' + this.getUrl() + '\", filename: \"' + this.getFilename() + '\", depth: ' + this.getDepth() + ' }';\n};\n\nResource.prototype.isSaved = function isSaved () {\n\treturn this.saved;\n};\n\nResource.prototype.setSaved = function setSaved () {\n\tthis.saved = true;\n};\n\nResource.prototype.setMetadata = function setMetadata (metadata) {\n\tthis.metadata = metadata;\n};\n\nmodule.exports = Resource;\n","/home/travis/build/npmtest/node-npmtest-website-scraper/node_modules/website-scraper/lib/config/resource-types.js":"var types = {\n\tcss: 'css',\n\thtml: 'html'\n};\n\nmodule.exports = types;\n","/home/travis/build/npmtest/node-npmtest-website-scraper/node_modules/website-scraper/lib/filename-generator/index.js":"var _ = require('lodash');\nvar byTypeFilenameGenerator = require('./by-type');\nvar bySiteStructureFilenameGenerator = require('./by-site-structure');\n\nvar builtInStrategies = {\n\tbyType: byTypeFilenameGenerator,\n\tbySiteStructure: bySiteStructureFilenameGenerator\n};\n\nvar supportedOptions = ['filenameGenerator', 'subdirectories', 'defaultFilename'];\n\nfunction FilenameGenerator (options) {\n\tvar self = this;\n\n\tself.options = _.pick(options, supportedOptions);\n\n\tvar currentStrategy = self.options.filenameGenerator;\n\tself.executeCurrentStrategy = _.isString(currentStrategy) ? builtInStrategies[currentStrategy] : currentStrategy;\n\n\tself.occupiedFileNames = [];\n}\n\nFilenameGenerator.prototype.generateFilename = function generateFilename (resource) {\n\tvar self = this;\n\tvar filename = self.executeCurrentStrategy(resource, self.options, self.occupiedFileNames);\n\tself.addOccupiedFileName(filename);\n\treturn filename;\n};\n\nFilenameGenerator.prototype.addOccupiedFileName = function addOccupiedFilename (filename) {\n\tthis.occupiedFileNames.push(filename);\n};\n\nmodule.exports = FilenameGenerator;\n","/home/travis/build/npmtest/node-npmtest-website-scraper/node_modules/website-scraper/lib/filename-generator/by-type.js":"var _ = require('lodash');\nvar path = require('path');\nvar utils = require('../utils');\nvar typeExtensions = require('../config/resource-ext-by-type');\n\nmodule.exports = function generateFilename (resource, options, occupiedFileNames) {\n\tvar occupiedNames = getSubDirectoryNames(options).concat(occupiedFileNames);\n\n\tvar filename = getFilenameForResource(resource, options);\n\tfilename = utils.shortenFilename(filename);\n\n\tvar extension = utils.getFilenameExtension(filename);\n\tvar directory = getDirectoryByExtension(extension, options);\n\n\tvar currentFilename = path.join(directory, filename);\n\tvar basename = path.basename(filename, extension);\n\tvar index = 1;\n\n\twhile (_.includes(occupiedNames, currentFilename)) {\n\t\tcurrentFilename = path.join(directory, basename + '_' + index + extension);\n\t\tindex++;\n\t}\n\n\treturn currentFilename;\n};\n\nfunction getFilenameForResource (resource, options) {\n\tvar preferredFilename = resource.getFilename();\n\tvar urlFilename = utils.getFilenameFromUrl(resource.getUrl());\n\tvar filename = preferredFilename || urlFilename || options.defaultFilename;\n\n\tvar resourceType = resource.getType();\n\tvar extension = utils.getFilenameExtension(filename);\n\n\tif (!extension && typeExtensions[resourceType]) {\n\t\textension = typeExtensions[resourceType][0];\n\t\tfilename += extension;\n\t}\n\n\treturn filename;\n}\n\nfunction getSubDirectoryNames (options) {\n\treturn _.map(options.subdirectories, function getDirectory (directory) { return directory.directory; });\n}\n\nfunction getDirectoryByExtension (extension, options) {\n\treturn _(options.subdirectories)\n\t\t\t.filter(function matchesExtension (directory) { return _.includes(directory.extensions, extension); })\n\t\t\t.map(function getDirectory (directory) { return directory.directory; })\n\t\t\t.first() || '';\n}\n","/home/travis/build/npmtest/node-npmtest-website-scraper/node_modules/website-scraper/lib/utils/index.js":"var url = require('url');\nvar path = require('path');\nvar Promise = require('bluebird');\nvar normalizeUrl = require('normalize-url');\nvar htmlEntities = require('he');\nvar typeByMime = require('../config/resource-type-by-mime');\nvar typeByExt = require('../config/resource-type-by-ext');\n\nvar logger = require('../logger');\n\nvar MAX_FILENAME_LENGTH = 255;\nvar IS_URL = /^((http[s]?:)?\\/\\/)/;\n\nfunction isUrl (path) {\n\treturn IS_URL.test(path);\n}\n\nfunction getUrl (currentUrl, path) {\n\tvar pathObject = url.parse(path);\n\tif (isUrl(path) && !pathObject.protocol) {\n\t\tvar urlObject = url.parse(currentUrl);\n\t\tpathObject.protocol = urlObject.protocol;\n\t\tpath = url.format(pathObject);\n\t}\n\treturn url.resolve(currentUrl, path);\n}\n\nfunction getUnixPath (filepath) {\n\treturn filepath.replace(/\\\\/g, '/');\n}\n\nfunction getRelativePath (path1, path2) {\n\tvar dirname = path.dirname(path1);\n\tvar relativePath = path.relative(dirname, path2);\n\treturn getUnixPath(relativePath);\n}\n\n/**\n * Returns decoded pathname from url\n * Example: https://example.co/path/logo%20(1).svg => /path/logo (1).svg\n * @param u - url\n * @returns {string} decoded pathname\n */\nfunction getPathnameFromUrl (u) {\n\tvar pathname = url.parse(u).pathname;\n\treturn decodeURI(pathname);\n}\n\n/**\n * Returns filename from given url\n * Example: http://example.com/some/path/file.js => file.js\n * @param {string} u - url\n * @returns {string} filename\n */\nfunction getFilenameFromUrl (u) {\n\treturn path.basename(getPathnameFromUrl(u));\n}\n\n/**\n * Returns relative path from given url\n * Example: http://example.com/some/path/file.js => some/path/file.js\n * @param {string} u - url\n * @returns {string} path\n */\nfunction getFilepathFromUrl (u) {\n\tvar nu = normalizeUrl(u);\n\treturn getPathnameFromUrl(nu).substring(1);\n}\n\nfunction getHashFromUrl (u) {\n\treturn url.parse(u).hash || '';\n}\n\n/**\n * Returns extension for given filepath\n * Example: some/path/file.js => .js\n * @param {string} filepath\n * @returns {string|null} - extension\n */\nfunction getFilenameExtension (filepath) {\n\treturn (typeof filepath === 'string') ? path.extname(filepath).toLowerCase() : null;\n}\n\nfunction shortenFilename (filename) {\n\tif (filename.length >= MAX_FILENAME_LENGTH) {\n\t\tvar shortFilename = filename.substring(0, 20) + getFilenameExtension(filename);\n\t\tlogger.debug('shorten filename: ' + filename + ' -> ' + shortFilename);\n\t\treturn shortFilename;\n\t}\n\treturn filename;\n}\n\nfunction waitAllFulfilled (promises) {\n\treturn Promise.all(promises.map(function returnWhenFulfilled (promise) {\n\t\treturn promise.reflect();\n\t}));\n}\n\nfunction urlsEqual (url1, url2) {\n\treturn normalizeUrl(url1) === normalizeUrl(url2);\n}\n\nfunction isUriSchemaSupported (path) {\n\tvar protocol = url.parse(path).protocol;\n\treturn !protocol || protocol && isUrl(path);\n}\n\nfunction getTypeByMime (mimeType) {\n\treturn typeByMime[mimeType];\n}\n\nfunction getTypeByFilename (filename) {\n\tvar ext = getFilenameExtension(filename);\n\treturn typeByExt[ext];\n}\n\nfunction decodeHtmlEntities (text) {\n\treturn typeof text === 'string' ? htmlEntities.decode(text) : '';\n}\n\nfunction clone (obj) {\n\treturn Object.assign({}, obj);\n}\n\nfunction extend (first, second) {\n\treturn Object.assign({}, first, second);\n}\n\nmodule.exports = {\n\tisUrl,\n\tgetUrl,\n\tgetUnixPath,\n\tgetRelativePath,\n\tgetFilenameFromUrl,\n\tgetFilepathFromUrl,\n\tgetFilenameExtension,\n\tgetHashFromUrl,\n\tshortenFilename,\n\twaitAllFulfilled,\n\tnormalizeUrl,\n\turlsEqual,\n\tisUriSchemaSupported,\n\tgetTypeByMime,\n\tgetTypeByFilename,\n\tdecodeHtmlEntities,\n\tclone,\n\textend\n};\n","/home/travis/build/npmtest/node-npmtest-website-scraper/node_modules/website-scraper/lib/config/resource-type-by-mime.js":"var types = require('./resource-types');\n\nmodule.exports = {\n\t'text/html': types.html,\n\t'text/css': types.css\n};\n","/home/travis/build/npmtest/node-npmtest-website-scraper/node_modules/website-scraper/lib/config/resource-type-by-ext.js":"var types = require('./resource-types');\n\n// should contain same data as ./resource-ext-by-type\nmodule.exports = {\n\t'.html': types.html,\n\t'.htm': types.html,\n\t'.css': types.css\n};\n","/home/travis/build/npmtest/node-npmtest-website-scraper/node_modules/website-scraper/lib/config/resource-ext-by-type.js":"var types = require('./resource-types');\nvar defaultExtensions = {};\n\n// should contain same data as ./resource-type-by-ext\ndefaultExtensions[types.html] = [ '.html', '.htm' ];\ndefaultExtensions[types.css] = [ '.css' ];\n\nmodule.exports = defaultExtensions;\n","/home/travis/build/npmtest/node-npmtest-website-scraper/node_modules/website-scraper/lib/filename-generator/by-site-structure.js":"var _ = require('lodash');\nvar path = require('path');\nvar utils = require('../utils');\nvar resourceTypes = require('../config/resource-types');\nvar resourceTypeExtensions = require('../config/resource-ext-by-type');\n\nmodule.exports = function generateFilename (resource, options) {\n\tvar resourceUrl = resource.getUrl();\n\tvar filePath = utils.getFilepathFromUrl(resourceUrl);\n\tvar extension = utils.getFilenameExtension(filePath);\n\n\t// If we have HTML from 'http://example.com/path' => set 'path/index.html' as filepath\n\tif (resource.isHtml()) {\n\t\tvar htmlExtensions = resourceTypeExtensions[resourceTypes.html];\n\t\tvar resourceHasHtmlExtension = _.includes(htmlExtensions, extension);\n\t\t// add index.html only if filepath has ext != html '/path/test.com' => '/path/test.com/index.html'\n\t\tif (!resourceHasHtmlExtension) {\n\t\t\tfilePath = path.join(filePath, options.defaultFilename);\n\t\t}\n\t}\n\n\treturn sanitizeFilepath(filePath);\n};\n\nfunction sanitizeFilepath (filePath) {\n\tfilePath = path.normalize(filePath);\n\tvar pathParts = filePath.split(path.sep);\n\tpathParts = _.pull(pathParts, '..');\n\tpathParts[pathParts.length - 1] = utils.shortenFilename(_.last(pathParts));\n\treturn pathParts.join(path.sep);\n}\n","/home/travis/build/npmtest/node-npmtest-website-scraper/node_modules/website-scraper/lib/request.js":"'use strict';\n\nconst _ = require('lodash');\nconst Promise = require('bluebird');\nconst request = require('request');\nconst get = Promise.promisify(request.get);\nconst logger = require('./logger');\n\nfunction getMimeType (contentType) {\n\treturn contentType ? contentType.split(';')[0] : null;\n}\n\nfunction defaultResponseHandler (response) {\n\treturn Promise.resolve(response.body);\n}\n\nfunction transformResult (result) {\n\tswitch (true) {\n\t\tcase _.isString(result):\n\t\t\treturn {\n\t\t\t\tbody: result,\n\t\t\t\tmetadata: null\n\t\t\t};\n\t\tcase _.isPlainObject(result):\n\t\t\treturn {\n\t\t\t\tbody: result.body,\n\t\t\t\tmetadata: result.metadata || null\n\t\t\t};\n\t\tdefault:\n\t\t\tthrow new Error('Wrong response handler result. Expected string or object, but received ' + typeof result);\n\t}\n}\n\nclass Request {\n\t/**\n\t *\n\t * @param {Object} options\n\t * @param {function} options.httpResponseHandler - custom response handler\n\t * @param {Object} options.request - custom options for request module\n\t */\n\tconstructor (options) {\n\t\tthis.handleResponse = options && options.httpResponseHandler ? options.httpResponseHandler : defaultResponseHandler;\n\t\tthis.options = options && options.request ? _.clone(options.request) : {};\n\t}\n\n\t/**\n\t * Performs get request to url and returns data for resource\n\t * @param {string} url - url of resource\n\t * @param {string} referer - url of parent resource\n\t * @return {Promise}\n\t */\n\tget (url, referer) {\n\t\tlet requestOptions = _.clone(this.options);\n\t\trequestOptions.url = url;\n\n\t\tif (referer) {\n\t\t\trequestOptions.headers = requestOptions.headers || {};\n\t\t\trequestOptions.headers.referer = referer;\n\t\t}\n\n\t\tlogger.debug(`[request] sending request for url ${url}, referer ${referer}`);\n\n\t\treturn get(requestOptions).then((response) => {\n\t\t\tlogger.debug(`[request] received response for ${response.request.href}, statusCode ${response.statusCode}`);\n\t\t\treturn this.handleResponse(response)\n\t\t\t\t.then(transformResult)\n\t\t\t\t.then((responseHandlerResult) => {\n\t\t\t\t\treturn {\n\t\t\t\t\t\turl: response.request.href,\n\t\t\t\t\t\tmimeType: getMimeType(response.headers['content-type']),\n\t\t\t\t\t\tbody: responseHandlerResult.body,\n\t\t\t\t\t\tmetadata: responseHandlerResult.metadata\n\t\t\t\t\t};\n\t\t\t\t});\n\t\t});\n\t}\n}\n\nmodule.exports = Request;\n","/home/travis/build/npmtest/node-npmtest-website-scraper/node_modules/website-scraper/lib/resource-handler/index.js":"var _ = require('lodash');\nvar Promise = require('bluebird');\nvar logger = require('../logger');\nvar utils = require('../utils');\n\nvar HtmlHandler = require('./html');\nvar CssHandler = require('./css');\n\nvar supportedOptions = ['prettifyUrls', 'sources', 'defaultFilename'];\n\nfunction ResourceHandler (options, context) {\n\tvar self = this;\n\tself.options = _.pick(options, supportedOptions);\n\tself.context = context;\n\n\tself.htmlHandler = new HtmlHandler(self.options, self.handleChildrenResources.bind(self));\n\tself.cssHandler = new CssHandler(self.options, self.handleChildrenResources.bind(self));\n}\n\nResourceHandler.prototype.getResourceHandler = function getResourceHandler (resource) {\n\tswitch (true) {\n\t\tcase resource.isCss():\n\t\t\tlogger.debug('using css handler for ' + resource);\n\t\t\treturn this.cssHandler;\n\t\tcase resource.isHtml():\n\t\t\tlogger.debug('using html handler for ' + resource);\n\t\t\treturn this.htmlHandler;\n\t\tdefault:\n\t\t\tlogger.debug('using no handler for ' + resource);\n\t\t\treturn null;\n\t}\n};\n\n/**\n * Request all resources from pathContainers paths\n * @param pathContainer - instance of ImgSrcsetTag or CommonTag or CssText, contains original paths for resources\n * @param {Resource} parentResource\n * @returns {Promise} - resolved when all resources from pathContainer were requested\n * and original paths in parentResource were updated with local paths for children resources\n */\nResourceHandler.prototype.handleChildrenResources = function handleChildrenResources (pathContainer, parentResource) {\n\tvar self = this;\n\tvar childrenPaths = pathContainer.getPaths();\n\tvar pathsToUpdate = [];\n\n\tvar childrenPromises = childrenPaths.map(function loadChildPath (childPath) {\n\t\tvar childResourceUrl = utils.getUrl(parentResource.getUrl(), childPath);\n\t\tvar childResource = parentResource.createChild(childResourceUrl);\n\n\t\treturn self.context.requestResource(childResource).then(function updateChildPath (respondedResource) {\n\t\t\tif (respondedResource) {\n\t\t\t\tparentResource.updateChild(childResource, respondedResource);\n\n\t\t\t\tvar relativePath = utils.getRelativePath(parentResource.getFilename(), respondedResource.getFilename());\n\t\t\t\tif (self.options.prettifyUrls) {\n\t\t\t\t\trelativePath = relativePath.replace(self.options.defaultFilename, '');\n\t\t\t\t}\n\t\t\t\tvar hash = utils.getHashFromUrl(childPath);\n\n\t\t\t\tif (hash) {\n\t\t\t\t\trelativePath = relativePath.concat(hash);\n\t\t\t\t}\n\n\t\t\t\tpathsToUpdate.push({ oldPath: childPath, newPath: relativePath});\n\t\t\t}\n\t\t\treturn null; // Prevent Bluebird warnings\n\t\t});\n\t});\n\n\treturn utils.waitAllFulfilled(childrenPromises).then(function updateChildrenPaths () {\n\t\treturn pathContainer.updateText(pathsToUpdate);\n\t});\n};\n\nResourceHandler.prototype.handleResource = function handleResource (resource) {\n\tvar resourceHandler = this.getResourceHandler(resource);\n\tif (resourceHandler && resourceHandler.handle) {\n\t\treturn resourceHandler.handle(resource);\n\t}\n\treturn Promise.resolve(resource);\n};\n\nmodule.exports = ResourceHandler;\n","/home/travis/build/npmtest/node-npmtest-website-scraper/node_modules/website-scraper/lib/resource-handler/html/index.js":"var cheerio = require('cheerio');\nvar Promise = require('bluebird');\nvar utils = require('../../utils');\nvar HtmlSourceElement = require('./html-source-element');\n\nfunction HtmlResourceHandler (options, handleChildrenPaths) {\n\tthis.options = options;\n\tthis.handleChildrenPaths = handleChildrenPaths;\n}\n\nHtmlResourceHandler.prototype.handle = function handle (resource) {\n\tvar $ = loadTextToCheerio(resource.getText());\n\tprepareToLoad($, resource);\n\n\treturn Promise.mapSeries(this.options.sources, this.loadResourcesForRule.bind(this, $, resource))\n\t\t.then(function updateResource () {\n\t\t\tresource.setText($.html());\n\t\t\treturn resource;\n\t\t});\n};\n\nHtmlResourceHandler.prototype.loadResourcesForRule = function loadResourcesForRule ($, parentResource, rule) {\n\tvar self = this;\n\tvar promises = $(rule.selector).map(function loadForElement () {\n\t\tvar el = new HtmlSourceElement($(this), rule);\n\t\tvar pathContainer = el.getPathContainer();\n\t\tif (!pathContainer) {\n\t\t\treturn Promise.resolve();\n\t\t}\n\t\treturn self.handleChildrenPaths(pathContainer, parentResource).then(el.setData.bind(el));\n\t}).get();\n\n\treturn utils.waitAllFulfilled(promises);\n};\n\nfunction prepareToLoad ($, resource) {\n\t$('base').each(function handleBaseTag () {\n\t\tvar el = $(this);\n\t\tvar href = el.attr('href');\n\t\tif (href) {\n\t\t\tvar newUrl = utils.getUrl(resource.getUrl(), href);\n\t\t\tresource.setUrl(newUrl);\n\t\t\tel.remove();\n\t\t}\n\t});\n}\n\nfunction loadTextToCheerio (text) {\n\treturn cheerio.load(text, {\n\t\tdecodeEntities: false\n\t});\n}\n\nmodule.exports = HtmlResourceHandler;\n","/home/travis/build/npmtest/node-npmtest-website-scraper/node_modules/website-scraper/lib/resource-handler/html/html-source-element.js":"var ImgSrcsetTag = require('../path-containers/html-img-srcset-tag');\nvar CommonTag = require('../path-containers/html-common-tag');\nvar CssText = require('../path-containers/css-text');\nvar _ = require('lodash');\nvar utils = require('../../utils');\n\nvar pathContainersByRule = [\n\t{ selector: '[style]', attr: 'style', containerClass: CssText },\n\t{ selector: 'style', containerClass: CssText },\n\t{ selector: '*[srcset]', attr: 'srcset', containerClass: ImgSrcsetTag }\n];\n\n/**\n * Represents pair of cheerio element and rule to find text with children resources\n * @param {Object} el - cheerio obj for dom element\n * @param {Object} rule - rule used to find current element\n * @param {string} rule.selector - cheerio selector\n * @param {string} rule.attr - attribute to find text which contains resources. if not set - use inner html\n * @constructor\n */\nfunction HtmlSourceElement (el, rule) {\n\tthis.el = el;\n\tthis.rule = rule;\n}\n\n/**\n * Get text from attr or from innerHtml of element based on rule\n * @returns {string}\n */\nHtmlSourceElement.prototype.getData = function getData () {\n\tvar text = this.rule.attr ? this.el.attr(this.rule.attr) : this.el.text();\n\treturn utils.decodeHtmlEntities(text);\n};\n\nHtmlSourceElement.prototype.setData = function setData (newData) {\n\tthis.rule.attr ? this.el.attr(this.rule.attr, newData) : this.el.text(newData);\n};\n\nHtmlSourceElement.prototype.getPathContainerClass = function getPathContainerClass () {\n\tvar selectedRule = _.find(pathContainersByRule, (containerByRule) => {\n\t\treturn this.el.is(containerByRule.selector) && this.rule.attr === containerByRule.attr;\n\t});\n\n\treturn selectedRule ? selectedRule.containerClass : CommonTag;\n};\n\nHtmlSourceElement.prototype.getPathContainer = function getPathContainer () {\n\tvar ContainerClass = this.getPathContainerClass();\n\tvar textWithResources = this.getData();\n\treturn textWithResources ? new ContainerClass(textWithResources) : null;\n};\n\nmodule.exports = HtmlSourceElement;\n","/home/travis/build/npmtest/node-npmtest-website-scraper/node_modules/website-scraper/lib/resource-handler/path-containers/html-img-srcset-tag.js":"var srcset = require('srcset');\nvar _ = require('lodash');\n\nfunction HtmlImgSrcSetTag (text) {\n\tthis.text = text || '';\n\tthis.imgSrcsetParts = srcset.parse(this.text);\n\tthis.paths = this.imgSrcsetParts.map(function getPath (imgSrcset) {\n\t\treturn imgSrcset.url;\n\t});\n}\n\nHtmlImgSrcSetTag.prototype.getPaths = function getPaths () {\n\treturn this.paths;\n};\n\nHtmlImgSrcSetTag.prototype.updateText = function updateText (pathsToUpdate) {\n\tvar imgSrcsetParts = this.imgSrcsetParts;\n\tpathsToUpdate.forEach(function updatePath (path) {\n\t\tvar srcsToUpdate = _.filter(imgSrcsetParts, {url: path.oldPath});\n\t\tsrcsToUpdate.forEach((srcToUpdate) => {\n\t\t\tsrcToUpdate.url = path.newPath;\n\t\t});\n\t});\n\treturn srcset.stringify(imgSrcsetParts);\n};\n\nmodule.exports = HtmlImgSrcSetTag;\n","/home/travis/build/npmtest/node-npmtest-website-scraper/node_modules/website-scraper/lib/resource-handler/path-containers/html-common-tag.js":"var _ = require('lodash');\nvar utils = require('../../utils');\n\nfunction getPaths (text) {\n\tvar isSamePageId = _.startsWith(text, '#');\n\tvar isUriSchemaSupported = utils.isUriSchemaSupported(text);\n\tif (isSamePageId || !isUriSchemaSupported) {\n\t\treturn [];\n\t}\n\treturn [text];\n}\n\nfunction HtmlCommonTag (text) {\n\tthis.text = text || '';\n\tthis.paths = getPaths(this.text);\n}\n\nHtmlCommonTag.prototype.getPaths = function getPaths () {\n\treturn this.paths;\n};\n\nHtmlCommonTag.prototype.updateText = function updateText (pathsToUpdate) {\n\tvar pathToUpdate = _.find(pathsToUpdate, {oldPath: this.paths[0]});\n\treturn pathToUpdate ? pathToUpdate.newPath : this.text;\n};\n\nmodule.exports = HtmlCommonTag;\n\n","/home/travis/build/npmtest/node-npmtest-website-scraper/node_modules/website-scraper/lib/resource-handler/path-containers/css-text.js":"var getCssUrls = require('css-url-parser');\nvar _ = require('lodash');\nvar format = require('util').format;\n\nfunction changeExactlyMatchedUrl (text, oldUrl, newUrl) {\n\t// starts with ' \" ( ends with ' \" )\n\tvar exactlyMatchedPattern = format('([\\'\"\\\\(\\\\s])%s([\\'\"\\\\)\\\\s])', _.escapeRegExp(oldUrl));\n\tvar exactlyMatchedRegexp = new RegExp(exactlyMatchedPattern, 'g');\n\ttext = text.replace(exactlyMatchedRegexp, function changeUrl (match, g1, g2) {\n\t\treturn g1 + newUrl + g2;\n\t});\n\treturn text;\n}\n\nfunction CssText (text) {\n\tthis.text = text || '';\n\tthis.paths = getCssUrls(this.text);\n}\n\nCssText.prototype.getPaths = function getPaths () {\n\treturn this.paths;\n};\n\nCssText.prototype.updateText = function updateText (pathsToUpdate) {\n\tvar updatedText = this.text;\n\tpathsToUpdate.forEach(function updatePath (path) {\n\t\tupdatedText = changeExactlyMatchedUrl(updatedText, path.oldPath, path.newPath);\n\t});\n\treturn updatedText;\n};\n\nmodule.exports = CssText;\n\n\n","/home/travis/build/npmtest/node-npmtest-website-scraper/node_modules/website-scraper/lib/resource-handler/css/index.js":"var CssText = require('./../path-containers/css-text');\n\nfunction CssResourceHandler (options, handleChildrenPaths) {\n\tthis.options = options;\n\tthis.handleChildrenPaths = handleChildrenPaths;\n}\n\nCssResourceHandler.prototype.handle = function handle (resource) {\n\tvar pathContainer = new CssText(resource.getText());\n\treturn this.handleChildrenPaths(pathContainer, resource).then(function updateText (updatedText) {\n\t\tresource.setText(updatedText);\n\t\treturn resource;\n\t});\n};\n\nmodule.exports = CssResourceHandler;\n","/home/travis/build/npmtest/node-npmtest-website-scraper/node_modules/website-scraper/lib/resource-saver/index.js":"'use strict';\n\nconst path = require('path');\nconst _ = require('lodash');\nconst Promise = require('bluebird');\n\nconst fs = require('fs-extra');\nconst outputFileAsync = Promise.promisify(fs.outputFile);\nconst removeAsync = Promise.promisify(fs.remove);\n\nconst supportedOptions = [ 'directory' ];\n\nclass ResourceSaver {\n\tconstructor (options) {\n\t\tthis.options = _.pick(options, supportedOptions);\n\n\t\tif (!this.options.directory || typeof this.options.directory !== 'string') {\n\t\t\tthrow new Error('Incorrect directory ' + this.options.directory);\n\t\t}\n\n\t\tthis.absoluteDirectoryPath = path.resolve(process.cwd(), this.options.directory);\n\n\t\tif (exists(this.absoluteDirectoryPath)) {\n\t\t\tthrow new Error('Directory ' + this.absoluteDirectoryPath + ' exists');\n\t\t}\n\n\t\tthis.loadedResources = [];\n\t}\n\n\t/**\n\t * Save resource to file system\n\t * @param {Resource} resource\n\t * @returns {Promise}\n\t */\n\tsaveResource (resource) {\n\t\tconst filename = path.join(this.absoluteDirectoryPath, resource.getFilename());\n\t\tconst text = resource.getText();\n\t\treturn outputFileAsync(filename, text, { encoding: 'binary' }).then(() => {\n\t\t\tthis.loadedResources.push(resource);\n\t\t});\n\t}\n\n\t/**\n\t * Remove all files that were saved before\n\t * @returns {Promise}\n\t */\n\terrorCleanup () {\n\t\tif (!_.isEmpty(this.loadedResources)) {\n\t\t\treturn removeAsync(this.absoluteDirectoryPath);\n\t\t}\n\t\treturn Promise.resolve();\n\t}\n}\n\nfunction exists (path) {\n\tlet exists;\n\ttry {\n\t\tif (fs.statSync(path)) {\n\t\t\texists = true;\n\t\t}\n\t} catch (e) {\n\t\tif (e.code === 'ENOENT') {\n\t\t\texists = false;\n\t\t} else {\n\t\t\tthrow e;\n\t\t}\n\t}\n\n\treturn exists;\n}\n\nmodule.exports = ResourceSaver;\n","/home/travis/build/npmtest/node-npmtest-website-scraper/node_modules/website-scraper/lib/utils/normalized-url-map.js":"'use strict';\n\nvar normalizeUrl = require('./index').normalizeUrl;\n\nclass NormalizedUrlMap extends Map {\n\tget (key) {\n\t\treturn super.get(normalizeUrl(key));\n\t}\n\n\tset (key, value) {\n\t\treturn super.set(normalizeUrl(key), value);\n\t}\n\n\thas (key) {\n\t\treturn super.has(normalizeUrl(key));\n\t}\n}\n\nmodule.exports = NormalizedUrlMap;\n"}